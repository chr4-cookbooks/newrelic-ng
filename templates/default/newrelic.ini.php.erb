; Generated by Chef for <%= node['fqdn'] %>.
; Local modifications will be overwritten.

;
; This file contains the various settings for the New Relic PHP agent. There
; are many options, all of which are described in detail at the following URL:
; https://newrelic.com/docs/php/php-agent-phpini-settings
;

; If you use a full path to the extension you insulate yourself from the
; extension directory changing if you change PHP installations or versions.
; If you do not use an absolute path then the file must be installed in the
; active configuration's extension directory.
extension=newrelic.so

[newrelic]
;
; Setting: newrelic.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enable or disable the agent. Please note that you cannot globally
;          disable the agent and then selectively enable it on a per-directory
;          basis. If you disable the agent in the global INI file then the
;          agent will not initialize at all. However, you can selectively
;          disable the agent on a per-directory basis.
;
<% if @config.enabled.nil? %>
;newrelic.enabled=true
<% else %>
newrelic.enabled = <%= @config.enabled %>
<% end %>

;
; Setting: newrelic.license
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Sets the New Relic license key to use. This can vary from directory
;          to directory if you are running a multi-tenant system. By special
;          dispensation if you upgraded from a previous version of the agent
;          where the license key was set in the daemon, the installation and
;          upgrade script will have preserved your license key from the file
;          /etc/newrelic/newrelic.cfg, but ONLY if you installed via rpm/yum
;          or dpkg. The key is saved in /etc/newrelic/upgrade_please.key
;          and the agent will look for that file if you do not specify a valid
;          license here.
;          It is *STRONGLY* recommended that you set the license key in your
;          INI file(s) and do not rely on the key file being present. Also
;          please note that even if you are not letting the agent start the
;          daemon and are still using newrelic.cfg (see below) the license
;          keyword in that file is no longer obeyed. Instead the agent will
;          use the preserved value of that license from the key file.
;          Once you have updated your INI files to contain the license we
;          urge you to remove /etc/newrelic/upgrade_please.key in order to
;          eliminate the potential for confusion about exactly where the key
;          is coming from.
;
newrelic.license = "<%= @config.license_key %>"

;
; Setting: newrelic.logfile
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the name of the file to send log messages to.
;
<% if @config.logfile.nil? %>
newrelic.logfile = "/var/log/newrelic/php_agent.log"
<% else %>
newrelic.logfile = "<%= @config.logfile %>"
<% end %>

;
; Setting: newrelic.loglevel
; Type   : string
; Scope  : system
; Default: "info"
; Info   : Sets the level of detail to include in the log file. You should
;          rarely need to change this from the default, and usually only under
;          the guidance of technical support.
;          Must be one of the following values:
;            always, error, warning, info, verbose, debug, verbosedebug
;
<% if @config.loglevel.nil? %>
;newrelic.loglevel = "info"
<% else %>
newrelic.loglevel = "<%= @config.loglevel %>"
<% end %>

;
; Setting: newrelic.appname
; Type   : string
; Scope  : per-directory
; Default: "PHP Application"
; Info   : Sets the name of the application that metrics will be reported into.
;          This can in fact be a list of up to 3 application names, each of
;          which must be separated by a semi-colon. The first name in any such
;          list is considered the 'primary' application name and must be unique
;          for each account / license key.
;
<% if @config.appname.nil? %>
;newrelic.appname = "PHP Application"
<% else %>
newrelic.appname = "<%= @config.appname %>"
<% end %>

;
; Beginning with version 3.0 of the agent, the daemon can be automatically
; started by the agent. There is no need to start the daemon before starting
; Apache or PHP-FPM. All of the newrelic.daemon.* settings are options that
; control the behavior of the daemon. These settings are converted into the
; appropriate command line options when the agent starts the daemon. This is
; now the preferred method of starting the daemon. There are still usage cases
; (such as using a single daemon for serving multiple Apache instances) where
; you may want to start the daemon via it's init script, but for most users,
; this is the best place to configure and start the daemon.
;
; The agent will only launch the daemon if one isn't already running. Also
; note that the agent will NOT stop the daemon once it has started. If you
; want control over exactly when the daemon starts and stops you can still
; achieve that by creating a daemon configuration file (located by default at
; /etc/newrelic/newrelic.cfg) and running the chkconfig or equivalent command.
; Please see the newrelic.cfg template file for details. That template file
; is located at /usr/lib/newrelic-php5/scripts/newrelic.cfg.template.
;
; Also please note that the options here and in newrelic.cfg are identical,
; except that in this file they are preceded with "newrelic.daemon.".
;

;
; Setting: newrelic.daemon.logfile
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the name of the file to send daemon log messages to.
;
newrelic.daemon.logfile = "<%= @config.daemon_logfile %>"

;
; Setting: newrelic.daemon.loglevel
; Type   : string
; Scope  : system
; Default: "info"
; Info   : Sets the level of detail to include in the daemon log. You should
;          rarely need to change this from the default, and usually only under
;          the guidance of technical support.
;          Must be one of the following values:
;            always, error, warning, info, verbose, debug, verbosedebug
;
<% if @config.daemon_loglevel.nil? %>
;newrelic.daemon.loglevel = "info"
<% else %>
newrelic.daemon.loglevel = "<%= @config.daemon_loglevel %>"
<% end %>

;
; Setting: newrelic.daemon.port
; Type   : string or integer
; Scope  : system
; Default: /tmp/.newrelic.sock
; Info   : Sets how the agent and daemon communicate. How this is set can impact
;          performance. The default is to use a UNIX-domain socket located at
;          /tmp/.newrelic.sock. If you want to use UNIX domain sockets then
;          this value must begin with a "/". If you set this to an integer
;          value in the range 1-65534, then this will instruct the agent to
;          use a normal TCP socket on the port specified. This may be easier
;          to use if you are using a chroot environment.
;
<% if @config.daemon_port.nil? %>
;newrelic.daemon.port = "/tmp/.newrelic.sock"
<% else %>
newrelic.daemon.port = <%= @config.daemon_port %>
<% end %>

;
; Setting: newrelic.daemon.max_threads
; Type   : integer
; Scope  : system
; Default: 8
; Info   : Sets the number of threads in the daemon "worker pool" that will be
;          used for processing requests from each agent. The minimum is 4 and
;          the maximum is 128.
;
<% if @config.daemon_max_threads.nil? %>
;newrelic.daemon.max_threads = 8
<% else %>
newrelic.daemon.max_threads = <%= @config.daemon_max_threads %>
<% end %>

;
; Setting: newrelic.daemon.ssl
; Type   : boolean
; Scope  : system
; Default: true (as of version 3.6)
; Info   : Sets whether or not communication with New Relic data collectors
;          should use a secure HTTP connection or not.
;
<% if @config.daemon_ssl.nil? %>
;newrelic.daemon.ssl = true
<% else %>
newrelic.daemon.ssl = <%= @config.daemon_ssl %>
<% end %>

;
; Setting: newrelic.daemon.proxy
; Type   : string
; Scope  : system
; Default: none
; Info   : Sets the host and user credentials to use as an egress proxy. This
;          is only used if your site requires a proxy in order to access
;          external servers on the internet, in this case the New Relic data
;          collection servers. This is expressed in one of the following forms:
;             hostname
;             hostname:port
;             user@hostname
;             user@hostname:port
;             user:password@hostname
;             user:password@hostname:port
;
<% if @config.daemon_proxy.nil? %>
;newrelic.daemon.proxy = ""
<% else %>
newrelic.daemon.proxy = "<%= @config.daemon_proxy %>"
<% end %>

;
; Setting: newrelic.daemon.pidfile
; Type   : string
; Scope  : system
; Default: OS dependent
; Info   : Sets the name of the file to store the running daemon's process ID
;          (PID) in. This file is used by the daemon startup and shutdown
;          script to determine whether or not the daemon is already running.
;
<% if @config.daemon_pidfile.nil? %>
;newrelic.daemon.pidfile = ""
<% else %>
newrelic.daemon.pidfile = "<%= @config.daemon_pidfile %>"
<% end %>

;
; Setting: newrelic.daemon.location
; Type   : string
; Scope  : system
; Default: /usr/bin/newrelic-daemon
; Info   : Sets the name of the daemon executable to launch.
;          Please note that on OpenSolaris where /usr is frequently a read-only
;          file system, the default daemon location is
;          /opt/newrelic/bin/newrelic-daemon.
;
<% if @config.daemon_location.nil? %>
;newrelic.daemon.location = "/usr/bin/newrelic-daemon"
<% else %>
newrelic.daemon.location = "<%= @config.daemon_location %>"
<% end %>

;
; Setting: newrelic.daemon.collector_host
; Type   : string
; Scope  : system
; Default: collector.newrelic.com
; Info   : Sets the host name of the New Relic data collector host to use.
;          Please note that this is NOT any form of local host. It refers to
;          the New Relic provided host. There is very little reason to ever
;          change this from the default except in certain very special
;          circumstances, and then only on instruction from a New Relic sales
;          person or support staff member.
;
<% if @config.daemon_collector_host.nil? %>
;newrelic.daemon.collector_host = "collector.newrelic.com"
<% else %>
newrelic.daemon.collector_host = "<%= @config.daemon_collector_host %>"
<% end %>

;
; Setting: newrelic.daemon.dont_launch
; Type   : integer (0, 1, 2 or 3)
; Scope  : system
; Default: 0
; Info   : If you prefer to have the daemon launched externally before the
;          agent starts up, set this variable to non-zero. The value you
;          choose determines exactly when the agent is allowed to start the
;          daemon:
;          0 - agent can start the daemon any time it needs to
;          1 - non-CLI (i.e Apache / php-fpm) agents can start the daemon
;          2 - only CLI agents can start the daemon
;          3 - the agent will never start the daemon
;
<% if @config.daemon_dont_launch.nil? %>
;newrelic.daemon.dont_launch = 0
<% else %>
newrelic.daemon.dont_launch = <%= @config.daemon_dont_launch %>
<% end %>

;
; Setting: newrelic.capture_params
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Enable or disable the capturing of URL parameters. If enabled, then
;          any variables passed on the URL like (for example ?id=12345) will be
;          saved with the request and visible in various places in the web UI.
;          If you tend to pass sensitive information around directly in the URL
;          then its a good idea to keep this disabled. However, if your URL
;          parameters are simply used for parameters without sensitive data but
;          that are meaningful to each transaction then you can enable this.
;
<% if @config.capture_params.nil? %>
;newrelic.capture_params = false
<% else %>
newrelic.capture_params = <%= @config.capture_params %>
<% end %>

; Setting: newrelic.ignored_params
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : A comma-separated list of parameters to always exclude if parameter
;          capturing is enabled above. You can use this to filter out sensitive
;          user data that may appear as a URL parameter.
;
<% if @config.ignored_params.nil? %>
;newrelic.ignored_params = ""
<% else %>
newrelic.ignored_params = "<%= @config.ignored_params %>"
<% end %>

;
; Setting: newrelic.error_collector.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enable the New Relic error collector. This will record the 20 most
;          severe errors per harvest cycle. It is rare to want to disable this.
;          Please also note that your New Relic subscription level may force
;          this to be disabled regardless of any value you set for it.
;
<% if @config.error_collector_enabled.nil? %>
;newrelic.error_collector.enabled = true
<% else %>
newrelic.error_collector.enabled = <%= @config.error_collector_enabled %>
<% end %>

;
; Setting: newrelic.error_collector.record_database_errors
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Currently only supported for MySQL database functions. If enabled,
;          this will cause errors returned by various MySQL functions to be
;          treated as if they were PHP errors, and thus subject to error
;          collection. This is only obeyed if the error collector is enabled
;          above and the account subscription level permits error trapping.
;
<% if @config.error_collector_record_database_errors.nil? %>
;newrelic.error_collector.record_database_errors = false
<% else %>
newrelic.error_collector.record_database_errors = <%= @config.error_collector_record_database_errors %>
<% end %>

;
; Setting: newrelic.error_collector.prioritize_api_errors
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : If the error collector is enabled and you use the New Relic API to
;          notice an error, if this is set to true then assign the highest
;          priority to such errors.
;
<% if @config.error_collector_prioritize_api_errors.nil? %>
;newrelic.error_collector.prioritize_api_errors = false
<% else %>
newrelic.error_collector.prioritize_api_errors = <%= @config.error_collector_prioritize_api_errors %>
<% end %>

;
; Setting: newrelic.browser_monitoring.auto_instrument
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables automatic real user monitoring ("auto-RUM").
;          When enabled will cause the agent to insert a header and a footer
;          in HTML output that will time the actual end-user experience.
;
<% if @config.browser_monitoring_auto_instrument.nil? %>
;newrelic.browser_monitoring.auto_instrument = true
<% else %>
newrelic.browser_monitoring.auto_instrument = <%= @config.browser_monitoring_auto_instrument %>
<% end %>

;
; Setting: newrelic.transaction_tracer.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the transaction tracer. When enabled this will
;          produce a detailed call graph for any transaction that exceeds a
;          certain threshold (see next entry). Only one transaction trace per
;          application per harvest cycle is stored and it is always the slowest
;          transaction during that cycle. Transaction traces are extremely
;          useful when diagnosing problem spots in your application. Please
;          note that TT's may be disabled by your account subscription level
;          regardless of what you set here.
;
<% if @config.transaction_tracer_enabled.nil? %>
;newrelic.transaction_tracer.enabled = true
<% else %>
newrelic.transaction_tracer.enabled = <%= @config.transaction_tracer_enabled %>
<% end %>

;
; Setting: newrelic.transaction_tracer.threshold
; Type   : string with a time specification or the word "apdex_f"
; Scope  : per-directory
; Default: "apdex_f"
; Info   : Specifies the threshold above which a transaction becomes a
;          candidate for the transaction tracer. This can either be an absolute
;          time value like "200ms" or "1s250ms" or "1h30m" or "750us" or the
;          word "apdex_f". This last value, "apdex_f", means "4 times apdex_t".
;          Thus the threshold changes according to your apdex_t setting. This
;          is the default.
;
<% if @config.transaction_tracer_threshold.nil? %>
;newrelic.transaction_tracer.threshold = "apdex_f"
<% else %>
newrelic.transaction_tracer.threshold = "<%= @config.transaction_tracer_threshold %>"
<% end %>

;
; Setting: newrelic.transaction_tracer.detail
; Type   : integer in the range 0-2
; Scope  : per-directory
; Default: 1
; Info   : Sets the level of detail in a transaction trace. Setting this to 0
;          will only show the relatively few PHP functions that New Relic has
;          deemed to be "interesting", as well as any custom functions you set
;          (see below). A setting of 1 will trace and time all user functions,
;          and a setting of 2, which needs another special variable to be set
;          in order to take effect, will trace ALL PHP functions, including
;          internal ones implemented in modules. This last setting can have a
;          severe impact on performance which is why you need to consult New
;          Relic support staff at support@newrelic.com to get the "special"
;          variable to set to enable the feature. It is very rarely needed.
;
;          In earlier releases of the agent this was known as "top100".
;
<% if @config.transaction_tracer_detail.nil? %>
;newrelic.transaction_tracer.detail = 1
<% else %>
newrelic.transaction_tracer.detail = <%= @config.transaction_tracer_detail %>
<% end %>

;
; Setting: newrelic.transaction_tracer.slow_sql
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables the "slow SQL" tracer. When enabled, this will
;          record the top 10 slowest SQL calls along with a stack trace of
;          where the call occurred in your code.
;
<% if @config.transaction_tracer_slow_sql.nil? %>
;newrelic.transaction_tracer.slow_sql = true
<% else %>
newrelic.transaction_tracer.slow_sql = <%= @config.transaction_tracer_slow_sql %>
<% end %>

;
; Setting: newrelic.transaction_tracer.stack_trace_threshold
; Type   : time specification string ("500ms", "1s750ms" etc)
; Scope  : per-directory
; Default: 500ms
; Info   : Sets the threshold above which the New Relic agent will record a
;          stack trace for a transaction trace.
;
<% if @config.transaction_tracer_stack_trace_threshold.nil? %>
;newrelic.transaction_tracer.stack_trace_threshold = 500
<% else %>
newrelic.transaction_tracer.stack_trace_threshold = <%= @config.transaction_tracer_stack_trace_threshold %>
<% end %>

;
; Setting: newrelic.transaction_tracer.explain_enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; Info   : Enables or disables requesting "explain plans" from MySQL and
;          PostgreSQL databases for slow SQL calls. The threshold for
;          requesting explain plans is defined below.
;
<% if @config.transaction_tracer_explain_enabled.nil? %>
;newrelic.transaction_tracer.explain_enabled = true
<% else %>
newrelic.transaction_tracer.explain_enabled = <%= @config.transaction_tracer_explain_enabled %>
<% end %>

;
; Setting: newrelic.transaction_tracer.explain_threshold
; Type   : time specification string ("750ms", "1s 500ms" etc)
; Scope  : per-directory
; Default: 500ms
; Info   : Used by the slow SQL tracer to set the threshold above which an SQL
;          statement is considered "slow", and to set the threshold above which
;          the transaction tracer will request an "explain plan" from the data-
;          base for slow SQL. This latter feature may not be active yet, please
;          refer to the agent release notes to see when it becomes available.
;          Only relevant if explain_enabled above is set to true.
;
<% if @config.transaction_tracer_explain_threshold.nil? %>
;newrelic.transaction_tracer.explain_threshold = 500
<% else %>
newrelic.transaction_tracer.explain_threshold = <%= @config.transaction_tracer_explain_threshold %>
<% end %>

;
; Setting: newrelic.transaction_tracer.record_sql
; Type   : "off", "raw" or "obfuscated"
; Scope  : per-directory
; Default: "obfuscated"
; Info   : Sets how SQL statements are recorded (if at all). If this is set to
;          "raw" then no attempt is made at obfuscating SQL statements. THIS IS
;          HIGHLY DISCOURAGED IN PRODUCTION ENVIRONMENTS! Setting this to raw
;          has considerable security implications as it can expose sensitive
;          and private customer data.
;
<% if @config.transaction_tracer_record_sql.nil? %>
;newrelic.transaction_tracer.record_sql = "obfuscated"
<% else %>
newrelic.transaction_tracer.record_sql = "<%= @config.transaction_tracer_record_sql %>"
<% end %>

; Setting: newrelic.transaction_tracer.custom
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Sets the name(s) of additional functions you want to instrument and
;          appear in transaction traces. This is only meaningful if you have
;          set newrelic.transaction_tracer.detail to 0. This can be a comma-
;          separated list of function or class method names.
;
<% if @config.transaction_tracer_custom.nil? %>
;newrelic.transaction_tracer.custom = ""
<% else %>
newrelic.transaction_tracer.custom = "<%= @config.transaction_tracer_custom %>"
<% end %>

;
; Setting: newrelic.framework
; Type   : string
; Scope  : per-directory
; Default: empty (auto-detect framework)
; Info   : Forces the framework to be one of the supported frameworks. This
;          should only ever be used if the auto-detection fails, in which case
;          we (support@newrelic.com) would very much like to know about the
;          detection failure. Must be one of the following values:
;            cakephp, codeigniter, drupal, joomla, kohana, magento, mediawiki,
;            symfony, wordpress, yii, zend or no_framework.
;
<% if @config.framework.nil? %>
;newrelic.framework = ""
<% else %>
newrelic.framework = "<%= @config.framework %>"
<% end %>

;
; Setting: newrelic.webtransaction.name.remove_trailing_path
; Type   : boolean
; Scope  : per-directory
; Default: false
; Info   : Used to aid naming transactions correctly when an unsupported
;          framework is being used. This option will cause anything after the
;          script name to be stripped from a URL. For example, setting this
;          would cause the "/xyz/zy" to be stripped from a URL such as
;          "/path/to/foo.php/xyz/zy".
;
<% if @config.webtransaction_name_remove_trailing_path.nil? %>
;newrelic.webtransaction.name.remove_trailing_path = false
<% else %>
newrelic.webtransaction.name.remove_trailing_path = <%= @config.webtransaction_name_remove_trailing_path %>
<% end %>

;
; Setting: newrelic.webtransaction.name.functions
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Unless a specific framework such as Drupal or Wordpress has been
;          detected, transactions are named according to the first script
;          encountered, such as login.php. However, if you use a dispatcher
;          file such as index.php this produces less useful data. If you use
;          a dispatcher to redirect to actions such as "login", "show", "edit"
;          etc, you can set this to the top level functions for those actions,
;          and the function names specified here will be used to name the
;          transaction.
;
<% if @config.webtransaction_name_functions.nil? %>
;newrelic.webtransaction.name.functions = ""
<% else %>
newrelic.webtransaction.name.functions = "<%= @config.webtransaction_name_functions %>"
<% end %>

;
; Setting: newrelic.webtransaction.name.files
; Type   : string
; Scope  : per-directory
; Default: none
; Info   : Same as newrelic.webtransaction.name.functions above but using file
;          names instead of function names. Accepts standard POSIX regular
;          expressions.
;
<% if @config.webtransaction_name_files.nil? %>
;newrelic.webtransaction.name.files = ""
<% else %>
newrelic.webtransaction.name.files = "<%= @config.webtransaction_name_files %>"
<% end %>

;
; Setting: newrelic.daemon.auditlog
; Type   : string
; Scope  : system
; Default: none
; info   : Sets the name of a file to record all uncompressed, un-encoded
;          content that is sent from your machine to the New Relic servers.
;          This includes the full URL for each command along with the payload
;          delivered with the command. This allows you to satisfy yourself
;          that the agent is not sending any sensitive data to our servers.
;          This file must be a different file the the newrelic.daemon.logfile
;          setting above. If you set it to the same name, then audit logging will be
;          silently ignored.
<% if @config.daemon_auditlog.nil? %>
;newrelic.daemon.auditlog = "/var/log/newrelic/audit.log"
<% else %>
newrelic.daemon.auditlog = "<%= @config.daemon_auditlog %>"
<% end %>

;
; Setting: newrelic.analytics_events.enabled
; Type   : boolean
; Scope  : per-directory
; Default: true
; info   : Collect and report analytics event data.  Event data allows the
;          New Relic UI to show additional information such as histograms at
;          the cost of additional daemon memory and collector communication.
;
<% if @config.analytics_events_enabled.nil? %>
;newrelic.analytics_events.enabled = true
<% else %>
newrelic.analytics_events.enabled = "<%= @config.analytics_events_enabled %>"
<% end %>

